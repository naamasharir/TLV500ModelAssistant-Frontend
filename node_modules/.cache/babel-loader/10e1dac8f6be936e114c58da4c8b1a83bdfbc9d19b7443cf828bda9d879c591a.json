{"ast":null,"code":"/**\n * Split this component for RSC import\n */\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const DEFAULT_MODE_STORAGE_KEY = 'mode';\nexport const DEFAULT_COLOR_SCHEME_STORAGE_KEY = 'color-scheme';\nexport const DEFAULT_ATTRIBUTE = 'data-color-scheme';\nexport default function InitColorSchemeScript(options) {\n  const {\n    defaultMode = 'system',\n    defaultLightColorScheme = 'light',\n    defaultDarkColorScheme = 'dark',\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    attribute: initialAttribute = DEFAULT_ATTRIBUTE,\n    colorSchemeNode = 'document.documentElement',\n    nonce\n  } = options || {};\n  let setter = '';\n  let attribute = initialAttribute;\n  if (initialAttribute === 'class') {\n    attribute = '.%s';\n  }\n  if (initialAttribute === 'data') {\n    attribute = '[data-%s]';\n  }\n  if (attribute.startsWith('.')) {\n    const selector = attribute.substring(1);\n    setter += \"\".concat(colorSchemeNode, \".classList.remove('\").concat(selector, \"'.replace('%s', light), '\").concat(selector, \"'.replace('%s', dark));\\n      \").concat(colorSchemeNode, \".classList.add('\").concat(selector, \"'.replace('%s', colorScheme));\");\n  }\n  const matches = attribute.match(/\\[([^\\]]+)\\]/); // case [data-color-scheme='%s'] or [data-color-scheme]\n  if (matches) {\n    const [attr, value] = matches[1].split('=');\n    if (!value) {\n      setter += \"\".concat(colorSchemeNode, \".removeAttribute('\").concat(attr, \"'.replace('%s', light));\\n      \").concat(colorSchemeNode, \".removeAttribute('\").concat(attr, \"'.replace('%s', dark));\");\n    }\n    setter += \"\\n      \".concat(colorSchemeNode, \".setAttribute('\").concat(attr, \"'.replace('%s', colorScheme), \").concat(value ? \"\".concat(value, \".replace('%s', colorScheme)\") : '\"\"', \");\");\n  } else {\n    setter += \"\".concat(colorSchemeNode, \".setAttribute('\").concat(attribute, \"', colorScheme);\");\n  }\n  return /*#__PURE__*/_jsx(\"script\", {\n    suppressHydrationWarning: true,\n    nonce: typeof window === 'undefined' ? nonce : ''\n    // eslint-disable-next-line react/no-danger\n    ,\n\n    dangerouslySetInnerHTML: {\n      __html: \"(function() {\\ntry {\\n  let colorScheme = '';\\n  const mode = localStorage.getItem('\".concat(modeStorageKey, \"') || '\").concat(defaultMode, \"';\\n  const dark = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-dark') || '\").concat(defaultDarkColorScheme, \"';\\n  const light = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-light') || '\").concat(defaultLightColorScheme, \"';\\n  if (mode === 'system') {\\n    // handle system mode\\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\\n    if (mql.matches) {\\n      colorScheme = dark\\n    } else {\\n      colorScheme = light\\n    }\\n  }\\n  if (mode === 'light') {\\n    colorScheme = light;\\n  }\\n  if (mode === 'dark') {\\n    colorScheme = dark;\\n  }\\n  if (colorScheme) {\\n    \").concat(setter, \"\\n  }\\n} catch(e){}})();\")\n    }\n  }, \"mui-color-scheme-init\");\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}