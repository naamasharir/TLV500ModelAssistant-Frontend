{"ast":null,"code":"import { getPath } from '@mui/system/style';\nimport { alpha } from '@mui/system/colorManipulator';\nconst getTextDecoration = _ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  const transformedColor = ownerState.color;\n  if ('colorSpace' in theme && theme.colorSpace) {\n    const color = getPath(theme, \"palette.\".concat(transformedColor, \".main\")) || getPath(theme, \"palette.\".concat(transformedColor)) || ownerState.color;\n    return theme.alpha(color, 0.4);\n  }\n\n  // check the `main` color first for a custom palette, then fallback to the color itself\n  const color = getPath(theme, \"palette.\".concat(transformedColor, \".main\"), false) || getPath(theme, \"palette.\".concat(transformedColor), false) || ownerState.color;\n  const channelColor = getPath(theme, \"palette.\".concat(transformedColor, \".mainChannel\")) || getPath(theme, \"palette.\".concat(transformedColor, \"Channel\"));\n  if ('vars' in theme && channelColor) {\n    return \"rgba(\".concat(channelColor, \" / 0.4)\");\n  }\n  return alpha(color, 0.4);\n};\nexport default getTextDecoration;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}