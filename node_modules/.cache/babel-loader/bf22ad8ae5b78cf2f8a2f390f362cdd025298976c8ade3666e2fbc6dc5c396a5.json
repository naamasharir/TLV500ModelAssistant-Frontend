{"ast":null,"code":"import _objectSpread from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toPropertyKey from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js\";\nimport _objectWithoutProperties from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from \"./cssVarsParser.js\";\nfunction prepareCssVars(theme) {\n  let parserConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    getSelector = defaultGetSelector,\n    disableCssColorScheme,\n    colorSchemeSelector: selector,\n    enableContrastVars\n  } = parserConfig;\n  // @ts-ignore - ignore components do not exist\n  const {\n      colorSchemes = {},\n      components,\n      defaultColorScheme = 'light'\n    } = theme,\n    otherTheme = _objectWithoutProperties(theme, _excluded);\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n      [defaultColorScheme]: defaultScheme\n    } = colorSchemes,\n    otherColorSchemes = _objectWithoutProperties(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (defaultScheme) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(defaultScheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  function defaultGetSelector(colorScheme, cssObject) {\n    let rule = selector;\n    if (selector === 'class') {\n      rule = '.%s';\n    }\n    if (selector === 'data') {\n      rule = '[data-%s]';\n    }\n    if (selector !== null && selector !== void 0 && selector.startsWith('data-') && !selector.includes('%s')) {\n      // 'data-joy-color-scheme' -> '[data-joy-color-scheme=\"%s\"]'\n      rule = \"[\".concat(selector, \"=\\\"%s\\\"]\");\n    }\n    if (colorScheme) {\n      if (rule === 'media') {\n        var _colorSchemes$colorSc;\n        if (theme.defaultColorScheme === colorScheme) {\n          return ':root';\n        }\n        const mode = ((_colorSchemes$colorSc = colorSchemes[colorScheme]) === null || _colorSchemes$colorSc === void 0 || (_colorSchemes$colorSc = _colorSchemes$colorSc.palette) === null || _colorSchemes$colorSc === void 0 ? void 0 : _colorSchemes$colorSc.mode) || colorScheme;\n        return {\n          [\"@media (prefers-color-scheme: \".concat(mode, \")\")]: {\n            ':root': cssObject\n          }\n        };\n      }\n      if (rule) {\n        if (theme.defaultColorScheme === colorScheme) {\n          return \":root, \".concat(rule.replace('%s', String(colorScheme)));\n        }\n        return rule.replace('%s', String(colorScheme));\n      }\n    }\n    return ':root';\n  }\n  const generateThemeVars = () => {\n    let vars = _objectSpread({}, rootVars);\n    Object.entries(colorSchemesMap).forEach(_ref2 => {\n      let [, {\n        vars: schemeVars\n      }] = _ref2;\n      vars = deepmerge(vars, schemeVars);\n    });\n    return vars;\n  };\n  const generateStyleSheets = () => {\n    const stylesheets = [];\n    const colorScheme = theme.defaultColorScheme || 'light';\n    function insertStyleSheet(key, css) {\n      if (Object.keys(css).length) {\n        stylesheets.push(typeof key === 'string' ? {\n          [key]: _objectSpread({}, css)\n        } : key);\n      }\n    }\n    insertStyleSheet(getSelector(undefined, _objectSpread({}, rootCss)), rootCss);\n    const {\n        [colorScheme]: defaultSchemeVal\n      } = colorSchemesMap,\n      other = _objectWithoutProperties(colorSchemesMap, [colorScheme].map(_toPropertyKey));\n    if (defaultSchemeVal) {\n      var _colorSchemes$colorSc2;\n      // default color scheme has to come before other color schemes\n      const {\n        css\n      } = defaultSchemeVal;\n      const cssColorSheme = (_colorSchemes$colorSc2 = colorSchemes[colorScheme]) === null || _colorSchemes$colorSc2 === void 0 || (_colorSchemes$colorSc2 = _colorSchemes$colorSc2.palette) === null || _colorSchemes$colorSc2 === void 0 ? void 0 : _colorSchemes$colorSc2.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? _objectSpread({\n        colorScheme: cssColorSheme\n      }, css) : _objectSpread({}, css);\n      insertStyleSheet(getSelector(colorScheme, _objectSpread({}, finalCss)), finalCss);\n    }\n    Object.entries(other).forEach(_ref3 => {\n      var _colorSchemes$key;\n      let [key, {\n        css\n      }] = _ref3;\n      const cssColorSheme = (_colorSchemes$key = colorSchemes[key]) === null || _colorSchemes$key === void 0 || (_colorSchemes$key = _colorSchemes$key.palette) === null || _colorSchemes$key === void 0 ? void 0 : _colorSchemes$key.mode;\n      const finalCss = !disableCssColorScheme && cssColorSheme ? _objectSpread({\n        colorScheme: cssColorSheme\n      }, css) : _objectSpread({}, css);\n      insertStyleSheet(getSelector(key, _objectSpread({}, finalCss)), finalCss);\n    });\n    if (enableContrastVars) {\n      stylesheets.push({\n        ':root': {\n          // use double underscore to indicate that these are private variables\n          '--__l-threshold': '0.7',\n          '--__l': 'clamp(0, (l / var(--__l-threshold) - 1) * -infinity, 1)',\n          '--__a': 'clamp(0.87, (l / var(--__l-threshold) - 1) * -infinity, 1)' // 0.87 is the default alpha value for black text.\n        }\n      });\n    }\n    return stylesheets;\n  };\n  return {\n    vars: themeVars,\n    generateThemeVars,\n    generateStyleSheets\n  };\n}\nexport default prepareCssVars;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}