{"ast":null,"code":"import _objectSpread from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"palette\", \"opacity\", \"overlays\", \"colorSpace\"];\nimport createPalette from \"./createPalette.js\";\nimport getOverlayAlpha from \"./getOverlayAlpha.js\";\nconst defaultDarkOverlays = [...Array(25)].map((_, index) => {\n  if (index === 0) {\n    return 'none';\n  }\n  const overlay = getOverlayAlpha(index);\n  return \"linear-gradient(rgba(255 255 255 / \".concat(overlay, \"), rgba(255 255 255 / \").concat(overlay, \"))\");\n});\nexport function getOpacity(mode) {\n  return {\n    inputPlaceholder: mode === 'dark' ? 0.5 : 0.42,\n    inputUnderline: mode === 'dark' ? 0.7 : 0.42,\n    switchTrackDisabled: mode === 'dark' ? 0.2 : 0.12,\n    switchTrack: mode === 'dark' ? 0.3 : 0.38\n  };\n}\nexport function getOverlays(mode) {\n  return mode === 'dark' ? defaultDarkOverlays : [];\n}\nexport default function createColorScheme(options) {\n  const {\n      palette: paletteInput = {\n        mode: 'light'\n      },\n      // need to cast to avoid module augmentation test\n      opacity,\n      overlays,\n      colorSpace\n    } = options,\n    rest = _objectWithoutProperties(options, _excluded);\n  // need to cast because `colorSpace` is considered internal at the moment.\n  const palette = createPalette(_objectSpread(_objectSpread({}, paletteInput), {}, {\n    colorSpace\n  }));\n  return _objectSpread({\n    palette,\n    opacity: _objectSpread(_objectSpread({}, getOpacity(palette.mode)), opacity),\n    overlays: overlays || getOverlays(palette.mode)\n  }, rest);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}