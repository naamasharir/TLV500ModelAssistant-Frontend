{"ast":null,"code":"import _objectWithoutProperties from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"palette\", \"cssVariables\", \"colorSchemes\", \"defaultColorScheme\"];\nimport createPalette from \"./createPalette.js\";\nimport createThemeWithVars from \"./createThemeWithVars.js\";\nimport createThemeNoVars from \"./createThemeNoVars.js\";\n// eslint-disable-next-line consistent-return\nfunction attachColorScheme(theme, scheme, colorScheme) {\n  if (!theme.colorSchemes) {\n    return undefined;\n  }\n  if (colorScheme) {\n    theme.colorSchemes[scheme] = _objectSpread(_objectSpread({}, colorScheme !== true && colorScheme), {}, {\n      palette: createPalette(_objectSpread(_objectSpread({}, colorScheme === true ? {} : colorScheme.palette), {}, {\n        mode: scheme\n      })) // cast type to skip module augmentation test\n    });\n  }\n}\n\n/**\n * Generate a theme base on the options received.\n * @param options Takes an incomplete theme object and adds the missing parts.\n * @param args Deep merge the arguments with the about to be returned theme.\n * @returns A complete, ready-to-use theme object.\n */\nexport default function createTheme() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n      palette,\n      cssVariables = false,\n      colorSchemes: initialColorSchemes = !palette ? {\n        light: true\n      } : undefined,\n      defaultColorScheme: initialDefaultColorScheme = palette === null || palette === void 0 ? void 0 : palette.mode\n    } = options,\n    rest = _objectWithoutProperties(options, _excluded);\n  const defaultColorSchemeInput = initialDefaultColorScheme || 'light';\n  const defaultScheme = initialColorSchemes === null || initialColorSchemes === void 0 ? void 0 : initialColorSchemes[defaultColorSchemeInput];\n  const colorSchemesInput = _objectSpread(_objectSpread({}, initialColorSchemes), palette ? {\n    [defaultColorSchemeInput]: _objectSpread(_objectSpread({}, typeof defaultScheme !== 'boolean' && defaultScheme), {}, {\n      palette\n    })\n  } : undefined);\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  if (cssVariables === false) {\n    if (!('colorSchemes' in options)) {\n      // Behaves exactly as v5\n      return createThemeNoVars(options, ...args);\n    }\n    let paletteOptions = palette;\n    if (!('palette' in options)) {\n      if (colorSchemesInput[defaultColorSchemeInput]) {\n        if (colorSchemesInput[defaultColorSchemeInput] !== true) {\n          paletteOptions = colorSchemesInput[defaultColorSchemeInput].palette;\n        } else if (defaultColorSchemeInput === 'dark') {\n          // @ts-ignore to prevent the module augmentation test from failing\n          paletteOptions = {\n            mode: 'dark'\n          };\n        }\n      }\n    }\n    const theme = createThemeNoVars(_objectSpread(_objectSpread({}, options), {}, {\n      palette: paletteOptions\n    }), ...args);\n    theme.defaultColorScheme = defaultColorSchemeInput;\n    theme.colorSchemes = colorSchemesInput;\n    if (theme.palette.mode === 'light') {\n      theme.colorSchemes.light = _objectSpread(_objectSpread({}, colorSchemesInput.light !== true && colorSchemesInput.light), {}, {\n        palette: theme.palette\n      });\n      attachColorScheme(theme, 'dark', colorSchemesInput.dark);\n    }\n    if (theme.palette.mode === 'dark') {\n      theme.colorSchemes.dark = _objectSpread(_objectSpread({}, colorSchemesInput.dark !== true && colorSchemesInput.dark), {}, {\n        palette: theme.palette\n      });\n      attachColorScheme(theme, 'light', colorSchemesInput.light);\n    }\n    return theme;\n  }\n  if (!palette && !('light' in colorSchemesInput) && defaultColorSchemeInput === 'light') {\n    colorSchemesInput.light = true;\n  }\n  return createThemeWithVars(_objectSpread(_objectSpread({}, rest), {}, {\n    colorSchemes: colorSchemesInput,\n    defaultColorScheme: defaultColorSchemeInput\n  }, typeof cssVariables !== 'boolean' && cssVariables), ...args);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}