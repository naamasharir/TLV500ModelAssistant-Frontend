{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"avatar\", \"className\", \"clickable\", \"color\", \"component\", \"deleteIcon\", \"disabled\", \"icon\", \"label\", \"onClick\", \"onDelete\", \"onKeyDown\", \"onKeyUp\", \"size\", \"variant\", \"tabIndex\", \"skipFocusWhenDisabled\", \"slots\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport CancelIcon from \"../internal/svg-icons/Cancel.js\";\nimport useForkRef from \"../utils/useForkRef.js\";\nimport unsupportedProp from \"../utils/unsupportedProp.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport chipClasses, { getChipUtilityClass } from \"./chipClasses.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disabled,\n    size,\n    color,\n    iconColor,\n    onDelete,\n    clickable,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, disabled && 'disabled', \"size\".concat(capitalize(size)), \"color\".concat(capitalize(color)), clickable && 'clickable', clickable && \"clickableColor\".concat(capitalize(color)), onDelete && 'deletable', onDelete && \"deletableColor\".concat(capitalize(color)), \"\".concat(variant).concat(capitalize(color))],\n    label: ['label', \"label\".concat(capitalize(size))],\n    avatar: ['avatar', \"avatar\".concat(capitalize(size)), \"avatarColor\".concat(capitalize(color))],\n    icon: ['icon', \"icon\".concat(capitalize(size)), \"iconColor\".concat(capitalize(iconColor))],\n    deleteIcon: ['deleteIcon', \"deleteIcon\".concat(capitalize(size)), \"deleteIconColor\".concat(capitalize(color)), \"deleteIcon\".concat(capitalize(variant), \"Color\").concat(capitalize(color))]\n  };\n  return composeClasses(slots, getChipUtilityClass, classes);\n};\nconst ChipRoot = styled('div', {\n  name: 'MuiChip',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      color,\n      iconColor,\n      clickable,\n      onDelete,\n      size,\n      variant\n    } = ownerState;\n    return [{\n      [\"& .\".concat(chipClasses.avatar)]: styles.avatar\n    }, {\n      [\"& .\".concat(chipClasses.avatar)]: styles[\"avatar\".concat(capitalize(size))]\n    }, {\n      [\"& .\".concat(chipClasses.avatar)]: styles[\"avatarColor\".concat(capitalize(color))]\n    }, {\n      [\"& .\".concat(chipClasses.icon)]: styles.icon\n    }, {\n      [\"& .\".concat(chipClasses.icon)]: styles[\"icon\".concat(capitalize(size))]\n    }, {\n      [\"& .\".concat(chipClasses.icon)]: styles[\"iconColor\".concat(capitalize(iconColor))]\n    }, {\n      [\"& .\".concat(chipClasses.deleteIcon)]: styles.deleteIcon\n    }, {\n      [\"& .\".concat(chipClasses.deleteIcon)]: styles[\"deleteIcon\".concat(capitalize(size))]\n    }, {\n      [\"& .\".concat(chipClasses.deleteIcon)]: styles[\"deleteIconColor\".concat(capitalize(color))]\n    }, {\n      [\"& .\".concat(chipClasses.deleteIcon)]: styles[\"deleteIcon\".concat(capitalize(variant), \"Color\").concat(capitalize(color))]\n    }, styles.root, styles[\"size\".concat(capitalize(size))], styles[\"color\".concat(capitalize(color))], clickable && styles.clickable, clickable && color !== 'default' && styles[\"clickableColor\".concat(capitalize(color), \")\")], onDelete && styles.deletable, onDelete && color !== 'default' && styles[\"deletableColor\".concat(capitalize(color))], styles[variant], styles[\"\".concat(variant).concat(capitalize(color))]];\n  }\n})(memoTheme(_ref => {\n  let {\n    theme\n  } = _ref;\n  const textColor = theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300];\n  return {\n    maxWidth: '100%',\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(13),\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 32,\n    lineHeight: 1.5,\n    color: (theme.vars || theme).palette.text.primary,\n    backgroundColor: (theme.vars || theme).palette.action.selected,\n    borderRadius: 32 / 2,\n    whiteSpace: 'nowrap',\n    transition: theme.transitions.create(['background-color', 'box-shadow']),\n    // reset cursor explicitly in case ButtonBase is used\n    cursor: 'unset',\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    textDecoration: 'none',\n    border: 0,\n    // Remove `button` border\n    padding: 0,\n    // Remove `button` padding\n    verticalAlign: 'middle',\n    boxSizing: 'border-box',\n    [\"&.\".concat(chipClasses.disabled)]: {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [\"& .\".concat(chipClasses.avatar)]: {\n      marginLeft: 5,\n      marginRight: -6,\n      width: 24,\n      height: 24,\n      color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,\n      fontSize: theme.typography.pxToRem(12)\n    },\n    [\"& .\".concat(chipClasses.avatarColorPrimary)]: {\n      color: (theme.vars || theme).palette.primary.contrastText,\n      backgroundColor: (theme.vars || theme).palette.primary.dark\n    },\n    [\"& .\".concat(chipClasses.avatarColorSecondary)]: {\n      color: (theme.vars || theme).palette.secondary.contrastText,\n      backgroundColor: (theme.vars || theme).palette.secondary.dark\n    },\n    [\"& .\".concat(chipClasses.avatarSmall)]: {\n      marginLeft: 4,\n      marginRight: -4,\n      width: 18,\n      height: 18,\n      fontSize: theme.typography.pxToRem(10)\n    },\n    [\"& .\".concat(chipClasses.icon)]: {\n      marginLeft: 5,\n      marginRight: -6\n    },\n    [\"& .\".concat(chipClasses.deleteIcon)]: {\n      WebkitTapHighlightColor: 'transparent',\n      color: theme.alpha((theme.vars || theme).palette.text.primary, 0.26),\n      fontSize: 22,\n      cursor: 'pointer',\n      margin: '0 5px 0 -6px',\n      '&:hover': {\n        color: theme.alpha((theme.vars || theme).palette.text.primary, 0.4)\n      }\n    },\n    variants: [{\n      props: {\n        size: 'small'\n      },\n      style: {\n        height: 24,\n        [\"& .\".concat(chipClasses.icon)]: {\n          fontSize: 18,\n          marginLeft: 4,\n          marginRight: -4\n        },\n        [\"& .\".concat(chipClasses.deleteIcon)]: {\n          fontSize: 16,\n          marginRight: 4,\n          marginLeft: -4\n        }\n      }\n    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter(['contrastText'])).map(_ref2 => {\n      let [color] = _ref2;\n      return {\n        props: {\n          color\n        },\n        style: {\n          backgroundColor: (theme.vars || theme).palette[color].main,\n          color: (theme.vars || theme).palette[color].contrastText,\n          [\"& .\".concat(chipClasses.deleteIcon)]: {\n            color: theme.alpha((theme.vars || theme).palette[color].contrastText, 0.7),\n            '&:hover, &:active': {\n              color: (theme.vars || theme).palette[color].contrastText\n            }\n          }\n        }\n      };\n    }), {\n      props: props => props.iconColor === props.color,\n      style: {\n        [\"& .\".concat(chipClasses.icon)]: {\n          color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor\n        }\n      }\n    }, {\n      props: props => props.iconColor === props.color && props.color !== 'default',\n      style: {\n        [\"& .\".concat(chipClasses.icon)]: {\n          color: 'inherit'\n        }\n      }\n    }, {\n      props: {\n        onDelete: true\n      },\n      style: {\n        [\"&.\".concat(chipClasses.focusVisible)]: {\n          backgroundColor: theme.alpha((theme.vars || theme).palette.action.selected, \"\".concat((theme.vars || theme).palette.action.selectedOpacity, \" + \").concat((theme.vars || theme).palette.action.focusOpacity))\n        }\n      }\n    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter(['dark'])).map(_ref3 => {\n      let [color] = _ref3;\n      return {\n        props: {\n          color,\n          onDelete: true\n        },\n        style: {\n          [\"&.\".concat(chipClasses.focusVisible)]: {\n            background: (theme.vars || theme).palette[color].dark\n          }\n        }\n      };\n    }), {\n      props: {\n        clickable: true\n      },\n      style: {\n        userSelect: 'none',\n        WebkitTapHighlightColor: 'transparent',\n        cursor: 'pointer',\n        '&:hover': {\n          backgroundColor: theme.alpha((theme.vars || theme).palette.action.selected, \"\".concat((theme.vars || theme).palette.action.selectedOpacity, \" + \").concat((theme.vars || theme).palette.action.hoverOpacity))\n        },\n        [\"&.\".concat(chipClasses.focusVisible)]: {\n          backgroundColor: theme.alpha((theme.vars || theme).palette.action.selected, \"\".concat((theme.vars || theme).palette.action.selectedOpacity, \" + \").concat((theme.vars || theme).palette.action.focusOpacity))\n        },\n        '&:active': {\n          boxShadow: (theme.vars || theme).shadows[1]\n        }\n      }\n    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter(['dark'])).map(_ref4 => {\n      let [color] = _ref4;\n      return {\n        props: {\n          color,\n          clickable: true\n        },\n        style: {\n          [\"&:hover, &.\".concat(chipClasses.focusVisible)]: {\n            backgroundColor: (theme.vars || theme).palette[color].dark\n          }\n        }\n      };\n    }), {\n      props: {\n        variant: 'outlined'\n      },\n      style: {\n        backgroundColor: 'transparent',\n        border: theme.vars ? \"1px solid \".concat(theme.vars.palette.Chip.defaultBorder) : \"1px solid \".concat(theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[700]),\n        [\"&.\".concat(chipClasses.clickable, \":hover\")]: {\n          backgroundColor: (theme.vars || theme).palette.action.hover\n        },\n        [\"&.\".concat(chipClasses.focusVisible)]: {\n          backgroundColor: (theme.vars || theme).palette.action.focus\n        },\n        [\"& .\".concat(chipClasses.avatar)]: {\n          marginLeft: 4\n        },\n        [\"& .\".concat(chipClasses.avatarSmall)]: {\n          marginLeft: 2\n        },\n        [\"& .\".concat(chipClasses.icon)]: {\n          marginLeft: 4\n        },\n        [\"& .\".concat(chipClasses.iconSmall)]: {\n          marginLeft: 2\n        },\n        [\"& .\".concat(chipClasses.deleteIcon)]: {\n          marginRight: 5\n        },\n        [\"& .\".concat(chipClasses.deleteIconSmall)]: {\n          marginRight: 3\n        }\n      }\n    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()) // no need to check for mainChannel as it's calculated from main\n    .map(_ref5 => {\n      let [color] = _ref5;\n      return {\n        props: {\n          variant: 'outlined',\n          color\n        },\n        style: {\n          color: (theme.vars || theme).palette[color].main,\n          border: \"1px solid \".concat(theme.alpha((theme.vars || theme).palette[color].main, 0.7)),\n          [\"&.\".concat(chipClasses.clickable, \":hover\")]: {\n            backgroundColor: theme.alpha((theme.vars || theme).palette[color].main, (theme.vars || theme).palette.action.hoverOpacity)\n          },\n          [\"&.\".concat(chipClasses.focusVisible)]: {\n            backgroundColor: theme.alpha((theme.vars || theme).palette[color].main, (theme.vars || theme).palette.action.focusOpacity)\n          },\n          [\"& .\".concat(chipClasses.deleteIcon)]: {\n            color: theme.alpha((theme.vars || theme).palette[color].main, 0.7),\n            '&:hover, &:active': {\n              color: (theme.vars || theme).palette[color].main\n            }\n          }\n        }\n      };\n    })]\n  };\n}));\nconst ChipLabel = styled('span', {\n  name: 'MuiChip',\n  slot: 'Label',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      size\n    } = ownerState;\n    return [styles.label, styles[\"label\".concat(capitalize(size))]];\n  }\n})({\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  paddingLeft: 12,\n  paddingRight: 12,\n  whiteSpace: 'nowrap',\n  variants: [{\n    props: {\n      variant: 'outlined'\n    },\n    style: {\n      paddingLeft: 11,\n      paddingRight: 11\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      paddingLeft: 8,\n      paddingRight: 8\n    }\n  }, {\n    props: {\n      size: 'small',\n      variant: 'outlined'\n    },\n    style: {\n      paddingLeft: 7,\n      paddingRight: 7\n    }\n  }]\n});\nfunction isDeleteKeyboardEvent(keyboardEvent) {\n  return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';\n}\n\n/**\n * Chips represent complex entities in small blocks, such as a contact.\n */\nconst Chip = /*#__PURE__*/React.forwardRef(function Chip(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiChip'\n  });\n  const {\n      avatar: avatarProp,\n      className,\n      clickable: clickableProp,\n      color = 'default',\n      component: ComponentProp,\n      deleteIcon: deleteIconProp,\n      disabled = false,\n      icon: iconProp,\n      label,\n      onClick,\n      onDelete,\n      onKeyDown,\n      onKeyUp,\n      size = 'medium',\n      variant = 'filled',\n      tabIndex,\n      skipFocusWhenDisabled = false,\n      // TODO v6: Rename to `focusableWhenDisabled`.\n      slots = {},\n      slotProps = {}\n    } = props,\n    other = _objectWithoutProperties(props, _excluded);\n  const chipRef = React.useRef(null);\n  const handleRef = useForkRef(chipRef, ref);\n  const handleDeleteIconClick = event => {\n    // Stop the event from bubbling up to the `Chip`\n    event.stopPropagation();\n    if (onDelete) {\n      onDelete(event);\n    }\n  };\n  const handleKeyDown = event => {\n    // Ignore events from children of `Chip`.\n    if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {\n      // Will be handled in keyUp, otherwise some browsers\n      // might init navigation\n      event.preventDefault();\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n  const handleKeyUp = event => {\n    // Ignore events from children of `Chip`.\n    if (event.currentTarget === event.target) {\n      if (onDelete && isDeleteKeyboardEvent(event)) {\n        onDelete(event);\n      }\n    }\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n  };\n  const clickable = clickableProp !== false && onClick ? true : clickableProp;\n  const component = clickable || onDelete ? ButtonBase : ComponentProp || 'div';\n  const ownerState = _objectSpread(_objectSpread({}, props), {}, {\n    component,\n    disabled,\n    size,\n    color,\n    iconColor: /*#__PURE__*/React.isValidElement(iconProp) ? iconProp.props.color || color : color,\n    onDelete: !!onDelete,\n    clickable,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const moreProps = component === ButtonBase ? _objectSpread({\n    component: ComponentProp || 'div',\n    focusVisibleClassName: classes.focusVisible\n  }, onDelete && {\n    disableRipple: true\n  }) : {};\n  let deleteIcon = null;\n  if (onDelete) {\n    deleteIcon = deleteIconProp && /*#__PURE__*/React.isValidElement(deleteIconProp) ? (/*#__PURE__*/React.cloneElement(deleteIconProp, {\n      className: clsx(deleteIconProp.props.className, classes.deleteIcon),\n      onClick: handleDeleteIconClick\n    })) : /*#__PURE__*/_jsx(CancelIcon, {\n      className: classes.deleteIcon,\n      onClick: handleDeleteIconClick\n    });\n  }\n  let avatar = null;\n  if (avatarProp && /*#__PURE__*/React.isValidElement(avatarProp)) {\n    avatar = /*#__PURE__*/React.cloneElement(avatarProp, {\n      className: clsx(classes.avatar, avatarProp.props.className)\n    });\n  }\n  let icon = null;\n  if (iconProp && /*#__PURE__*/React.isValidElement(iconProp)) {\n    icon = /*#__PURE__*/React.cloneElement(iconProp, {\n      className: clsx(classes.icon, iconProp.props.className)\n    });\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (avatar && icon) {\n      console.error('MUI: The Chip component can not handle the avatar ' + 'and the icon prop at the same time. Pick one.');\n    }\n  }\n  const externalForwardedProps = {\n    slots,\n    slotProps\n  };\n  const [RootSlot, rootProps] = useSlot('root', {\n    elementType: ChipRoot,\n    externalForwardedProps: _objectSpread(_objectSpread({}, externalForwardedProps), other),\n    ownerState,\n    // The `component` prop is preserved because `Chip` relies on it for internal logic. If `shouldForwardComponentProp` were `false`, `useSlot` would remove the `component` prop, potentially breaking the component's behavior.\n    shouldForwardComponentProp: true,\n    ref: handleRef,\n    className: clsx(classes.root, className),\n    additionalProps: _objectSpread({\n      disabled: clickable && disabled ? true : undefined,\n      tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex\n    }, moreProps),\n    getSlotProps: handlers => _objectSpread(_objectSpread({}, handlers), {}, {\n      onClick: event => {\n        var _handlers$onClick;\n        (_handlers$onClick = handlers.onClick) === null || _handlers$onClick === void 0 || _handlers$onClick.call(handlers, event);\n        onClick === null || onClick === void 0 || onClick(event);\n      },\n      onKeyDown: event => {\n        var _handlers$onKeyDown;\n        (_handlers$onKeyDown = handlers.onKeyDown) === null || _handlers$onKeyDown === void 0 || _handlers$onKeyDown.call(handlers, event);\n        handleKeyDown === null || handleKeyDown === void 0 || handleKeyDown(event);\n      },\n      onKeyUp: event => {\n        var _handlers$onKeyUp;\n        (_handlers$onKeyUp = handlers.onKeyUp) === null || _handlers$onKeyUp === void 0 || _handlers$onKeyUp.call(handlers, event);\n        handleKeyUp === null || handleKeyUp === void 0 || handleKeyUp(event);\n      }\n    })\n  });\n  const [LabelSlot, labelProps] = useSlot('label', {\n    elementType: ChipLabel,\n    externalForwardedProps,\n    ownerState,\n    className: classes.label\n  });\n  return /*#__PURE__*/_jsxs(RootSlot, _objectSpread(_objectSpread({\n    as: component\n  }, rootProps), {}, {\n    children: [avatar || icon, /*#__PURE__*/_jsx(LabelSlot, _objectSpread(_objectSpread({}, labelProps), {}, {\n      children: label\n    })), deleteIcon]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Chip.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.element,\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the chip will appear clickable, and will raise when pressed,\n   * even if the onClick prop is not defined.\n   * If `false`, the chip will not appear clickable, even if onClick prop is defined.\n   * This can be used, for example,\n   * along with the component prop to indicate an anchor Chip is clickable.\n   * Note: this controls the UI and does not affect the onClick event.\n   */\n  clickable: PropTypes.bool,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Override the default delete icon element. Shown only if `onDelete` is set.\n   */\n  deleteIcon: PropTypes.element,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Icon element.\n   */\n  icon: PropTypes.element,\n  /**\n   * The content of the component.\n   */\n  label: PropTypes.node,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * Callback fired when the delete icon is clicked.\n   * If set, the delete icon will be shown.\n   */\n  onDelete: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * If `true`, allows the disabled chip to escape focus.\n   * If `false`, allows the disabled chip to receive focus.\n   * @default false\n   */\n  skipFocusWhenDisabled: PropTypes.bool,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    label: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    label: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.number,\n  /**\n   * The variant to use.\n   * @default 'filled'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['filled', 'outlined']), PropTypes.string])\n} : void 0;\nexport default Chip;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}