{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"children\", \"className\", \"color\", \"component\", \"fontSize\", \"htmlColor\", \"inheritViewBox\", \"titleAccess\", \"viewBox\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from \"../utils/capitalize.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getSvgIconUtilityClass } from \"./svgIconClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    color,\n    fontSize,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'inherit' && \"color\".concat(capitalize(color)), \"fontSize\".concat(capitalize(fontSize))]\n  };\n  return composeClasses(slots, getSvgIconUtilityClass, classes);\n};\nconst SvgIconRoot = styled('svg', {\n  name: 'MuiSvgIcon',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'inherit' && styles[\"color\".concat(capitalize(ownerState.color))], styles[\"fontSize\".concat(capitalize(ownerState.fontSize))]];\n  }\n})(memoTheme(_ref => {\n  var _theme$transitions, _theme$transitions$cr, _transitions, _theme$vars, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _theme$vars2, _palette2, _theme$vars4, _palette3, _theme$vars5;\n  let {\n    theme\n  } = _ref;\n  return {\n    userSelect: 'none',\n    width: '1em',\n    height: '1em',\n    display: 'inline-block',\n    flexShrink: 0,\n    transition: (_theme$transitions = theme.transitions) === null || _theme$transitions === void 0 || (_theme$transitions$cr = _theme$transitions.create) === null || _theme$transitions$cr === void 0 ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {\n      duration: (_transitions = ((_theme$vars = theme.vars) !== null && _theme$vars !== void 0 ? _theme$vars : theme).transitions) === null || _transitions === void 0 || (_transitions = _transitions.duration) === null || _transitions === void 0 ? void 0 : _transitions.shorter\n    }),\n    variants: [{\n      props: props => !props.hasSvgAsChild,\n      style: {\n        // the <svg> will define the property that has `currentColor`\n        // for example heroicons uses fill=\"none\" and stroke=\"currentColor\"\n        fill: 'currentColor'\n      }\n    }, {\n      props: {\n        fontSize: 'inherit'\n      },\n      style: {\n        fontSize: 'inherit'\n      }\n    }, {\n      props: {\n        fontSize: 'small'\n      },\n      style: {\n        fontSize: ((_theme$typography = theme.typography) === null || _theme$typography === void 0 || (_theme$typography$pxT = _theme$typography.pxToRem) === null || _theme$typography$pxT === void 0 ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem'\n      }\n    }, {\n      props: {\n        fontSize: 'medium'\n      },\n      style: {\n        fontSize: ((_theme$typography2 = theme.typography) === null || _theme$typography2 === void 0 || (_theme$typography2$px = _theme$typography2.pxToRem) === null || _theme$typography2$px === void 0 ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem'\n      }\n    }, {\n      props: {\n        fontSize: 'large'\n      },\n      style: {\n        fontSize: ((_theme$typography3 = theme.typography) === null || _theme$typography3 === void 0 || (_theme$typography3$px = _theme$typography3.pxToRem) === null || _theme$typography3$px === void 0 ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875rem'\n      }\n    },\n    // TODO v5 deprecate color prop, v6 remove for sx\n    ...Object.entries(((_theme$vars2 = theme.vars) !== null && _theme$vars2 !== void 0 ? _theme$vars2 : theme).palette).filter(_ref2 => {\n      let [, value] = _ref2;\n      return value && value.main;\n    }).map(_ref3 => {\n      var _palette, _theme$vars3;\n      let [color] = _ref3;\n      return {\n        props: {\n          color\n        },\n        style: {\n          color: (_palette = ((_theme$vars3 = theme.vars) !== null && _theme$vars3 !== void 0 ? _theme$vars3 : theme).palette) === null || _palette === void 0 || (_palette = _palette[color]) === null || _palette === void 0 ? void 0 : _palette.main\n        }\n      };\n    }), {\n      props: {\n        color: 'action'\n      },\n      style: {\n        color: (_palette2 = ((_theme$vars4 = theme.vars) !== null && _theme$vars4 !== void 0 ? _theme$vars4 : theme).palette) === null || _palette2 === void 0 || (_palette2 = _palette2.action) === null || _palette2 === void 0 ? void 0 : _palette2.active\n      }\n    }, {\n      props: {\n        color: 'disabled'\n      },\n      style: {\n        color: (_palette3 = ((_theme$vars5 = theme.vars) !== null && _theme$vars5 !== void 0 ? _theme$vars5 : theme).palette) === null || _palette3 === void 0 || (_palette3 = _palette3.action) === null || _palette3 === void 0 ? void 0 : _palette3.disabled\n      }\n    }, {\n      props: {\n        color: 'inherit'\n      },\n      style: {\n        color: undefined\n      }\n    }]\n  };\n}));\nconst SvgIcon = /*#__PURE__*/React.forwardRef(function SvgIcon(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSvgIcon'\n  });\n  const {\n      children,\n      className,\n      color = 'inherit',\n      component = 'svg',\n      fontSize = 'medium',\n      htmlColor,\n      inheritViewBox = false,\n      titleAccess,\n      viewBox = '0 0 24 24'\n    } = props,\n    other = _objectWithoutProperties(props, _excluded);\n  const hasSvgAsChild = /*#__PURE__*/React.isValidElement(children) && children.type === 'svg';\n  const ownerState = _objectSpread(_objectSpread({}, props), {}, {\n    color,\n    component,\n    fontSize,\n    instanceFontSize: inProps.fontSize,\n    inheritViewBox,\n    viewBox,\n    hasSvgAsChild\n  });\n  const more = {};\n  if (!inheritViewBox) {\n    more.viewBox = viewBox;\n  }\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SvgIconRoot, _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    as: component,\n    className: clsx(classes.root, className),\n    focusable: \"false\",\n    color: htmlColor,\n    \"aria-hidden\": titleAccess ? undefined : true,\n    role: titleAccess ? 'img' : undefined,\n    ref: ref\n  }, more), other), hasSvgAsChild && children.props), {}, {\n    ownerState: ownerState,\n    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/_jsx(\"title\", {\n      children: titleAccess\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? SvgIcon.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Node passed into the SVG element.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   * @default 'inherit'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   * @default 'medium'\n   */\n  fontSize: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'large', 'medium', 'small']), PropTypes.string]),\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor: PropTypes.string,\n  /**\n   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`\n   * prop will be ignored.\n   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that\n   * `component`'s viewBox to the root node.\n   * @default false\n   */\n  inheritViewBox: PropTypes.bool,\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this prop.\n   */\n  shapeRendering: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess: PropTypes.string,\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   * @default '0 0 24 24'\n   */\n  viewBox: PropTypes.string\n} : void 0;\nSvgIcon.muiName = 'SvgIcon';\nexport default SvgIcon;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}