{"ast":null,"code":"import _objectSpread from \"/Users/naamasharir/Documents/personal/TLV500ModelAssistant/TLV500-Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { traverseBreakpoints } from \"./traverseBreakpoints.js\";\nfunction getSelfSpacingVar(axis) {\n  return \"--Grid-\".concat(axis, \"Spacing\");\n}\nfunction getParentSpacingVar(axis) {\n  return \"--Grid-parent-\".concat(axis, \"Spacing\");\n}\nconst selfColumnsVar = '--Grid-columns';\nconst parentColumnsVar = '--Grid-parent-columns';\nexport const generateGridSizeStyles = _ref => {\n  let {\n    theme,\n    ownerState\n  } = _ref;\n  const styles = {};\n  traverseBreakpoints(theme.breakpoints, ownerState.size, (appendStyle, value) => {\n    let style = {};\n    if (value === 'grow') {\n      style = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    }\n    if (value === 'auto') {\n      style = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    }\n    if (typeof value === 'number') {\n      style = {\n        flexGrow: 0,\n        flexBasis: 'auto',\n        width: \"calc(100% * \".concat(value, \" / var(\").concat(parentColumnsVar, \") - (var(\").concat(parentColumnsVar, \") - \").concat(value, \") * (var(\").concat(getParentSpacingVar('column'), \") / var(\").concat(parentColumnsVar, \")))\")\n      };\n    }\n    appendStyle(styles, style);\n  });\n  return styles;\n};\nexport const generateGridOffsetStyles = _ref2 => {\n  let {\n    theme,\n    ownerState\n  } = _ref2;\n  const styles = {};\n  traverseBreakpoints(theme.breakpoints, ownerState.offset, (appendStyle, value) => {\n    let style = {};\n    if (value === 'auto') {\n      style = {\n        marginLeft: 'auto'\n      };\n    }\n    if (typeof value === 'number') {\n      style = {\n        marginLeft: value === 0 ? '0px' : \"calc(100% * \".concat(value, \" / var(\").concat(parentColumnsVar, \") + var(\").concat(getParentSpacingVar('column'), \") * \").concat(value, \" / var(\").concat(parentColumnsVar, \"))\")\n      };\n    }\n    appendStyle(styles, style);\n  });\n  return styles;\n};\nexport const generateGridColumnsStyles = _ref3 => {\n  let {\n    theme,\n    ownerState\n  } = _ref3;\n  if (!ownerState.container) {\n    return {};\n  }\n  const styles = {\n    [selfColumnsVar]: 12\n  };\n  traverseBreakpoints(theme.breakpoints, ownerState.columns, (appendStyle, value) => {\n    const columns = value !== null && value !== void 0 ? value : 12;\n    appendStyle(styles, {\n      [selfColumnsVar]: columns,\n      '> *': {\n        [parentColumnsVar]: columns\n      }\n    });\n  });\n  return styles;\n};\nexport const generateGridRowSpacingStyles = _ref4 => {\n  let {\n    theme,\n    ownerState\n  } = _ref4;\n  if (!ownerState.container) {\n    return {};\n  }\n  const styles = {};\n  traverseBreakpoints(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {\n    var _theme$spacing;\n    const spacing = typeof value === 'string' ? value : (_theme$spacing = theme.spacing) === null || _theme$spacing === void 0 ? void 0 : _theme$spacing.call(theme, value);\n    appendStyle(styles, {\n      [getSelfSpacingVar('row')]: spacing,\n      '> *': {\n        [getParentSpacingVar('row')]: spacing\n      }\n    });\n  });\n  return styles;\n};\nexport const generateGridColumnSpacingStyles = _ref5 => {\n  let {\n    theme,\n    ownerState\n  } = _ref5;\n  if (!ownerState.container) {\n    return {};\n  }\n  const styles = {};\n  traverseBreakpoints(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {\n    var _theme$spacing2;\n    const spacing = typeof value === 'string' ? value : (_theme$spacing2 = theme.spacing) === null || _theme$spacing2 === void 0 ? void 0 : _theme$spacing2.call(theme, value);\n    appendStyle(styles, {\n      [getSelfSpacingVar('column')]: spacing,\n      '> *': {\n        [getParentSpacingVar('column')]: spacing\n      }\n    });\n  });\n  return styles;\n};\nexport const generateGridDirectionStyles = _ref6 => {\n  let {\n    theme,\n    ownerState\n  } = _ref6;\n  if (!ownerState.container) {\n    return {};\n  }\n  const styles = {};\n  traverseBreakpoints(theme.breakpoints, ownerState.direction, (appendStyle, value) => {\n    appendStyle(styles, {\n      flexDirection: value\n    });\n  });\n  return styles;\n};\nexport const generateGridStyles = _ref7 => {\n  let {\n    ownerState\n  } = _ref7;\n  return _objectSpread({\n    minWidth: 0,\n    boxSizing: 'border-box'\n  }, ownerState.container && _objectSpread(_objectSpread({\n    display: 'flex',\n    flexWrap: 'wrap'\n  }, ownerState.wrap && ownerState.wrap !== 'wrap' && {\n    flexWrap: ownerState.wrap\n  }), {}, {\n    gap: \"var(\".concat(getSelfSpacingVar('row'), \") var(\").concat(getSelfSpacingVar('column'), \")\")\n  }));\n};\nexport const generateSizeClassNames = size => {\n  const classNames = [];\n  Object.entries(size).forEach(_ref8 => {\n    let [key, value] = _ref8;\n    if (value !== false && value !== undefined) {\n      classNames.push(\"grid-\".concat(key, \"-\").concat(String(value)));\n    }\n  });\n  return classNames;\n};\nexport const generateSpacingClassNames = function (spacing) {\n  let smallestBreakpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'xs';\n  function isValidSpacing(val) {\n    if (val === undefined) {\n      return false;\n    }\n    return typeof val === 'string' && !Number.isNaN(Number(val)) || typeof val === 'number' && val > 0;\n  }\n  if (isValidSpacing(spacing)) {\n    return [\"spacing-\".concat(smallestBreakpoint, \"-\").concat(String(spacing))];\n  }\n  if (typeof spacing === 'object' && !Array.isArray(spacing)) {\n    const classNames = [];\n    Object.entries(spacing).forEach(_ref9 => {\n      let [key, value] = _ref9;\n      if (isValidSpacing(value)) {\n        classNames.push(\"spacing-\".concat(key, \"-\").concat(String(value)));\n      }\n    });\n    return classNames;\n  }\n  return [];\n};\nexport const generateDirectionClasses = direction => {\n  if (direction === undefined) {\n    return [];\n  }\n  if (typeof direction === 'object') {\n    return Object.entries(direction).map(_ref0 => {\n      let [key, value] = _ref0;\n      return \"direction-\".concat(key, \"-\").concat(value);\n    });\n  }\n  return [\"direction-xs-\".concat(String(direction))];\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}